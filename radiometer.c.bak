/* program to read the radiometer data. NAP 27 Nov 2017 */
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>

#include "radiometerData.h"
#include "radiometerCommands.h"
 
int main(void)
{
  int i,sockfd = 0,n = 0;
  char recvBuff[1024];
  char sendBuff[1024];
  char rainFlag;
  struct sockaddr_in serv_addr;
/*
  float *atnAz,*atnEl,*atnFreq,*atn;
*/
  radiometerData radiometerResp;
  radiometerCmd radiometerCommand;

/*
  *radiometerResp.ATN_El = malloc(sizeof(float)*127);
  *radiometerResp.ATN_Az = malloc(sizeof(float)*127);
  *radiometerResp.ATN_Frq = malloc(sizeof(float)*127);
  *radiometerResp.ATN= malloc(sizeof(float)*127);
*/

  radiometerCommand.commandID = 0xab;
/*The following four bytes are for password (not set, so zeroes */
/* otherwise see section 4.26 of the manual */
  radiometerCommand.pwd[0] = 0x0;
  radiometerCommand.pwd[1] = 0x0;
  radiometerCommand.pwd[2] = 0x0;
  radiometerCommand.pwd[3] = 0x0;

  memset(recvBuff, '0' ,sizeof(recvBuff));
  memset(sendBuff, '0' ,sizeof(sendBuff));

  if((sockfd = socket(AF_INET, SOCK_STREAM, 0))< 0) {
      printf("\n Error : Could not create socket \n");
      return 1;
    }
 
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(7000);
  serv_addr.sin_addr.s_addr = inet_addr("88.83.29.82");
/*IP address and port number of radiometer from Pierre's email of 25 Nov 2017*/
 
  if(connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))<0) {
      printf("\n Error : Connect Failed \n");
      return 1;
    }

  memcpy(sendBuff,(char*)&radiometerCommand,sizeof(radiometerCommand));
  n = send(sockfd,sendBuff,sizeof(radiometerCommand),0);
  if (n<0) printf("ERROR writing to Radiometer.");
/*
  printf("Wrote %d bytes to Radiometer\n",n);
*/
 
  n = recv(sockfd, (char *)&radiometerResp, sizeof(radiometerResp),0);
  if( n < 0)  printf("\n Read Error \n"); 
/*
  printf("Read %d bytes from Radiometer\n",n);
  printf ("Received %d bytes of data from Radiometer.\n",radiometerResp.totalLength);
  printf ("Received %d commandID from Radiometer.\n",radiometerResp.commandID&0xff);
  printf ("flags word: 0x%x \n",radiometerResp.flags);
  printf ("lengthATN: %d\n",radiometerResp.lengthATN&0xffff);
*/
  printf ("time stamp: %d (seconds since 00:00:00 1/1/2001)\n",radiometerResp.timeATN);
  rainFlag=radiometerResp.ATN_RF & 0x1f;
  if (rainFlag &0x1) printf("Raining!\n"); else printf("Not raining.\n");
/*
  printf("rainFlag quality: 0x%x\n",(rainFlag &0x6)>>1);
*/
  rainFlag=((rainFlag&0x6)>>1);
  if ((rainFlag & 0x6) ==0) printf("Rain flag quality not evaluated.\n");
  if ((rainFlag & 0x6) ==1) printf("Rain flag quality high.\n");
  if ((rainFlag & 0x6) ==2) printf("Rain flag quality medium.\n");
  if ((rainFlag & 0x6) ==3) printf("Rain flag quality low.\n");
/*
  printf ("ATN_RF: 0x%x\n",radiometerResp.ATN_RF&0x1f);
*/
  printf ("ATN_NO: %d (number of channels)\n",radiometerResp.noATN&0xffff);
  printf("ATN: %f dB\n",radiometerResp.ATN[0]);
  printf("ATN_Frq: %f GHz\n",radiometerResp.ATN_Frq[0]);
  printf("ATN_Az: %f deg\n",radiometerResp.ATN_Az[0]);
  printf("ATN_El: %f deg\n",radiometerResp.ATN_El[0]);
/*
printf("No. ATN_Az(deg) ATN_El(deg) ATN_Frq(GHz) ATN(dB)");
for(i=0;i<127;i++) {
printf("%d %f %f %f %f\n",i,radiometerResp.ATN_Az[i],radiometerResp.ATN_El[i],radiometerResp.ATN_Frq[i],radiometerResp.ATN[i]);
}
*/
/*
  printf ("TPB_NO: %d\n",radiometerResp.noTPB&0xffff);
  printf ("TPC_NO: %d\n",radiometerResp.noTPC&0xffff);
  printf ("HPC_NO: %d\n",radiometerResp.noHPC&0xffff);
  printf ("RHP_NO: %d\n",radiometerResp.noRHP&0xffff);
  printf ("LPR_NO: %d\n",radiometerResp.noLPR&0xffff);
  printf ("ATS_NO: %d\n",radiometerResp.noATS&0xffff);
  printf ("HOV_NO: %d\n",radiometerResp.noHOV&0xffff);
  printf ("M2D_NO: %d\n",radiometerResp.noM2D&0xffff);
  printf ("TRK_NO: %d\n",radiometerResp.noTRK&0xffff);
*/
/*
  printf ("lengthLWP: %d \n",radiometerResp.lengthLWP);
  printf ("timeLWP: %d \n",radiometerResp.timeLWP);
  printf ("LWP_RF: 0x%x \n",radiometerResp.LWP_RF);
  printf ("LWP_El: %f \n",radiometerResp.LWP_El);
  printf ("LWP_Az: %f \n",radiometerResp.LWP_Az);
  printf ("LWP: %f \n",radiometerResp.LWP);
  printf ("lengthIWV: %d\n",radiometerResp.lengthIWV);
  printf ("timeIWV: %d\n",radiometerResp.timeIWV);
  printf ("IWV_RF: 0x%x\n",radiometerResp.IWV_RF);
  printf ("IWV_El: %f\n",radiometerResp.IWV_El);
  printf ("IWV_Az: %f\n",radiometerResp.IWV_Az);
  printf ("IWV: %f\n",radiometerResp.IWV);
  printf ("lengthHPC: %d \n",radiometerResp.lengthHPC);
  printf ("timeHPC: %d \n",radiometerResp.timeHPC);
  printf ("HPC_RF: 0x%x \n",radiometerResp.HPC_RF);
  printf ("HPC_no: %d \n",radiometerResp.noHPC);
  printf ("HPC_Az: %f \n",radiometerResp.HPC_Az);
  printf ("HPC: %f \n",radiometerResp.HPC);
  printf ("lengthCBH: %d\n",radiometerResp.lengthCBH);
  printf ("timeCBH: %d\n",radiometerResp.timeCBH);
  printf ("CBH_RF: 0x%x\n",radiometerResp.CBH_RF);
  printf ("CBH: %f\n",radiometerResp.CBH);
  printf ("lengthBLH: %d\n",radiometerResp.lengthBLH);
  printf ("timeBLH: %d\n",radiometerResp.timeBLH);
  printf ("BLH_RF: 0x%x\n",radiometerResp.BLH_RF);
  printf ("BLH: %f\n",radiometerResp.BLH);
  printf ("lengthTPB: %d\n",radiometerResp.lengthTPB);
  printf ("timeTPB: %d\n",radiometerResp.timeTPB);
  printf ("TPB_RF: 0x%x\n",radiometerResp.TPB_RF);
  printf ("noTPB: %d\n",radiometerResp.noTPB);
*/

  close(sockfd);
 
  return 0;
}
